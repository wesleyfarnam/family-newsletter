generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER2
  CONTRIBUTOR
  ADMIN
  SUPER_ADMIN
}

enum NewsletterFreq {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
}

enum ReminderFreq {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  password            String?
  name                String?
  role                Role           @default(USER2)
  invitedBy           String?
  inviter             User?          @relation("UserInvites", fields: [invitedBy], references: [id])
  invitees            User[]         @relation("UserInvites")
  emailNotifications  Boolean        @default(true)
  reminderFrequency   ReminderFreq   @default(WEEKLY)
  resetToken          String?
  resetTokenExpiry    DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  newsletters         Newsletter[]
  newsletterMembers   NewsletterMember[]
  responses           Response[]
  notifications       Notification[]
}

model Newsletter {
  id                  String         @id @default(cuid())
  name                String
  description         String?
  frequency           NewsletterFreq @default(MONTHLY)
  adminId             String
  admin               User           @relation(fields: [adminId], references: [id])
  colorScheme         String?
  layoutTemplate      String?
  lastEditionSentAt   DateTime?
  reminderEnabled     Boolean        @default(true)
  reminderDays        Int            @default(14)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  members             NewsletterMember[]
  questionnaires      Questionnaire[]
  editions            NewsletterEdition[]
  invitations         Invitation[]
  notifications       Notification[]
}

model NewsletterMember {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsletterId  String
  newsletter    Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  role          Role       @default(CONTRIBUTOR)
  joinedAt      DateTime   @default(now())

  @@unique([userId, newsletterId])
}

model Questionnaire {
  id            String     @id @default(cuid())
  newsletterId  String
  newsletter    Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  title         String
  questions     String
  dueDate       DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  responses     Response[]
}

model NewsletterEdition {
  id            String     @id @default(cuid())
  newsletterId  String
  newsletter    Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  title         String
  content       String
  publishedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Response {
  id              String        @id @default(cuid())
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers         String
  submittedAt     DateTime      @default(now())
  media           Media[]
}

model Media {
  id          String   @id @default(cuid())
  responseId  String
  response    Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  type        String
  url         String
  uploadedAt  DateTime @default(now())
}

model Invitation {
  id            String     @id @default(cuid())
  email         String
  newsletterId  String
  newsletter    Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  role          Role       @default(USER2)
  token         String     @unique
  expiresAt     DateTime
  acceptedAt    DateTime?
  createdAt     DateTime   @default(now())
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  title       String
  message     String
  read        Boolean  @default(false)
  sentAt      DateTime @default(now())
  createdAt   DateTime @default(now())
  newsletterId String?
  newsletter   Newsletter? @relation(fields: [newsletterId], references: [id], onDelete: SetNull)
}
